{"meta":{"title":"Lzl678","subtitle":null,"description":null,"author":"Lzl678","url":"http://lzl678.top"},"pages":[{"title":"","date":"2019-04-21T10:40:39.975Z","updated":"2019-04-21T10:40:11.978Z","comments":true,"path":"google56a84ca53dd2d7ea.html","permalink":"http://lzl678.top/google56a84ca53dd2d7ea.html","excerpt":"","text":"google-site-verification: google56a84ca53dd2d7ea.html"},{"title":"分类","date":"2019-02-17T06:31:56.000Z","updated":"2019-02-17T06:35:07.000Z","comments":false,"path":"categories/index.html","permalink":"http://lzl678.top/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-17T06:31:56.000Z","updated":"2019-02-17T06:35:10.000Z","comments":false,"path":"tags/index.html","permalink":"http://lzl678.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"VS2019 回环剪贴板","slug":"2019-05-11_VS2019回环剪贴板","date":"2019-05-11T13:50:21.923Z","updated":"2019-05-11T13:52:01.151Z","comments":true,"path":"2019-05-11_VS2019回环剪贴板/","link":"","permalink":"http://lzl678.top/2019-05-11_VS2019回环剪贴板/","excerpt":"","text":"简述 在编写程序中总会需要编写相似的代码，如果每一次都写一遍即浪费时间，也降低了编码乐趣，所以在使用开发环境时，会借助一些插件或 IDE 本身的功能来减少重复操作。 之前在 VS2019 实用操作 中介绍了列模式、代码片段、复制等几个快速编码的小技巧，今天介绍一下 VS2019 中的另一个小技巧，或许这也正是你想要的。 显示剪切板历史 如下图所示，我们想在另一个文件中添加 OnProperties 消息处理程序，在此处拷贝OnProperties 的消息映射及函数定义。 切换到另一文件，输入快捷键 Ctrl+Shift+V 可以看到之前拷贝的代码，选择某一项后点击鼠标左键或 Enter 即可将该代码块粘贴到当前鼠标光标处。 环形缓存区 当我们拷贝代码块时，会将其存储在一个环形缓存区中，该缓存区最多存储 9 项。之前拷贝了 2 处代码块，我们再拷贝 8 处代码块，则之前的函数定义不会再显示在剪切板历史项中，如下图所示： 该缓存区属于内存缓存区，所以当重启 VS2019 后之前的拷贝历史会被清除。 小结 本文以一个简单的示例演示了回环剪切板的功能，可以先拷贝不同的代码块，然后通过历史显示项可以方便的选择需要拷贝的代码块。VS 开发环境是日常工作的主要工具，在不断使用中加深对它的了解，从而提高编程体验及开发效率。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[{"name":"VS2019","slug":"VS2019","permalink":"http://lzl678.top/tags/VS2019/"}]},{"title":"XTP 控件库简介","slug":"2019-05-07_XTP 控件库简介","date":"2019-05-07T14:29:14.437Z","updated":"2019-05-07T14:29:14.438Z","comments":true,"path":"2019-05-07_XTP 控件库简介/","link":"","permalink":"http://lzl678.top/2019-05-07_XTP 控件库简介/","excerpt":"","text":"简述 现在还有多少人在开发基于 Windows 的桌面程序呢？这些人中又有多少人是在使用 MFC 进行桌面开发呢？ 使用 VS2010 及之后版本的 IDE 进行桌面程序开发时，如果使用 MFC 技术，则会发现有了许多以 CMFC 开头的控件，如浮动窗口、属性控件、Ribbon 工具栏、Grid 等控件，这些控件在 MFC 的基础上增加了很多更加强大的功能。除此之外还有主题设置，可以将程序设置成 Office 相关的主题，如 Blue、Black 等，但是这些主题只针对 CMFC 开头的新控件有效，对之前的原生控件无法有效。因此需要找一个替代方案，从而使软件具有统一的主题配置，看起来也相对美观一些。 以 MFC 为基础开发出来的增强控件库有多个，比较完备的是 BCG 和 XTP（Xtreme ToolkitPro）。使用这两个控件库都能解决主题配置的问题，也都包含了前面提到的控件（以 CMFC 开头的增强型控件）同等功能的控件。 在下载试用后，功能上都能满足要求，只是 BCG 库的源文件都包含在同一个目录下，没有按不同的模块组织代码。而 XTP 库将其按照各个功能模块进行组织，更利于查找不同的模块进行学习。所以最终选用的控件库是 XTP，下面对该控件库包含的文件目录进行简单的介绍。 XTP XTP 是 Xtreme ToolkitPro 的缩写，由于该控件库中的代码类名都以 CXTP 开头，所以后面以 XTP 库来代表该控件库。 安装该控件库就像安装其它 Windows 程序一样，双击安装文件，然后点击下一步直到安装完成即可，此处不再赘述。安装后目录如下所示： 下面对各个目录进行简单的介绍：Bin：将 XTP 编译为动态库时，该目录下存储编译后的 dll 库文件；Lib：编译 XTP 库时，该目录下存储编译后的 lib 库文件；Help：存放 XTP 的帮助文档，主要是一些 chm 文档；Links：与 XTP 库相关的一些快捷链接图标； Samples：按模块划分，存储各个模块的示例程序，根据这些示例可以查看相关组件提供的功能，便于学习各个功能的具体使用方法。如下图所示： Source：按模块划分，存储各个模块的源文件，如下图所示： Workspace：有三个文件夹，分别包含资源文件的解决方案文件（.sln 文件）、Samples 目录下的各个示例的解决方案文件、源码的解决方案文件。使用各个目录下的工程可以编译控件库、示例程序、资源文件，后面再介绍怎样使用 VS2019 进行编译各个工程。如下图所示： Utils：包含多个使用程序，下图红色区域中的程序对应于 Samples\\Utilities 目录下的代码示例，这几个程序也是对各个控件的综合使用，有相对较高的学习价值。 Utils\\AppWizard：目录下包含 XTP 的应用向导文件； Utils\\Styles：目录下包含 XTP 提供的主题文件，对应于 Source\\SkinFramework\\Styles 目录下的各个工程； Utils\\Translations：目录下包含 XTP 提供的不同语言的资源文件，对应于 Workspace\\Resource 目录下的各个工程。 小结 以上对 XTP 安装目录下的相关文件进行了说明，后续会记录下如何编译库、主题设置、使用中文资源、各个高级控件的使用方法等相关问题，算是对这些年使用该控件库的总结吧。 - - - End - - -","categories":[{"name":"MFC","slug":"MFC","permalink":"http://lzl678.top/categories/MFC/"}],"tags":[{"name":"MFC","slug":"MFC","permalink":"http://lzl678.top/tags/MFC/"},{"name":"XTP","slug":"XTP","permalink":"http://lzl678.top/tags/XTP/"}]},{"title":"详解WTL应用向导","slug":"2019-04-26_详解WTL应用向导","date":"2019-04-26T13:50:03.405Z","updated":"2019-04-28T05:39:36.652Z","comments":true,"path":"2019-04-26_详解WTL应用向导/","link":"","permalink":"http://lzl678.top/2019-04-26_详解WTL应用向导/","excerpt":"","text":"之前向 VS2019 中添加了 WTL 应用向导，今天来分析下该应用向导安装的相关文件，最终达到拷贝相关文件到 VS2019 的相应目录中即可直接使用 WTL 应用向导的目的。 在 VS2017 之前的版本中，应用向导安装的目录是 VStudio 安装目录下的 VC\\vcprojects 目录，在 VS2017 及 VS2019 中，应用向导安装的目录是 VStudio 安装目录下的 Common7\\IDE\\VC\\vcprojects 目录。 应用向导 下载 WTL 并解压，与向导有关的文件存储在 AppWizard 目录下的 Files 目录中。 通过 Setup.js 安装向导后，会将部分文件进行修改并拷贝到 VStudio 的相关目录下，如在 VS2019 拷贝到下图所示目录： 安装向导后，使用 VS2019 创建 WTL 工程时，选择 WTL 项目模板如下图。图中的图标是 WTL10AppWiz.ico 文件，后面的说明文字存储在 WTL10AppWiz.vsdir 文件中。 WTL 向导显示的文字说明及各个选项对应的是存储在 HTML 文件下的 .htm 文件，点击 Finish 后会调用 Scripts 目录下的 default.js 文件中的 OnFinish(selProj, selObj) 函数，该函数根据之前在向导上的操作创建工程，并将 Templates 目录下对应的文件拷贝到工程目录下。 所有的这些都是由 VStudio 的向导引擎进行控制，而相关配置存储在 WTL10AppWiz.vsz 文件中，该文件配置向导引擎、向导文件路径等信息，若该文件配置错误则将无法使用 WTL 应用向导。比对向导安装前后的文件。 参数分析： 修改 WTL10AppWiz.vsdir 在 vcprojects 目录下的 WTL 目录中也包含 WTL10AppWiz.vsdir 文件，主要内容如下图所示： 除了含有选择项目模板时的说明文字，也指向了 WTL10AppWiz.vsz 文件的路径，将路径修改为当前路径，这样就可将 vcprojects 目录下的 WTL10AppWiz.ico、WTL10AppWiz.vsz 拷贝到 WTL 目录下，与 WTL10AppWiz.vsdir 文件存储在同一目录，效果如下图： 修改 WTL10AppWiz.vsz 当前 WTL10AppWiz.vsz 文件中的参数 ABSOLUTE_PATH 指向的路径在其它磁盘，我们可以将其目录下的 HTML、Images、Scripts、Templates 文件夹拷贝到 WTL10AppWiz.vsz 所在的目录，使与 WTL 向导有关的文件都在一个目录。效果如下图： 由于每个人的安装习惯不同，会将 VS2019 安装在不同的目录，如果使用绝对路径指示向导文件所在目录则无法达到我们的目的。凡事都是相对的，有绝对路径相应的就有相对路径，只是要找到正确的参数及设置方式，下面进行说明。 在使用绝对路径时，参数 WIZARD_NAME 的值不会影响应用向导的使用；在使用相对路径时，参数 WIZARD_NAME 的值与相对路径共同配合才能使用应用向导，需要设置为当前所在的目录名。设置方式如下： 经过以上设置，我们可以直接拷贝 vcprojects 目录下的 WTL 文件夹到其它安装了 VS2019 的电脑上，将其存放在对应的 Common7\\IDE\\VC\\vcprojects 中就可以直接使用 WTL 应用向导。 - - - End - - -","categories":[{"name":"WTL","slug":"WTL","permalink":"http://lzl678.top/categories/WTL/"}],"tags":[{"name":"VS2019","slug":"VS2019","permalink":"http://lzl678.top/tags/VS2019/"},{"name":"WTL","slug":"WTL","permalink":"http://lzl678.top/tags/WTL/"}]},{"title":"将WTL应用向导添加到VS2019","slug":"2019-04-25_将WTL应用向导添加到VS2019","date":"2019-04-25T15:00:10.426Z","updated":"2019-05-07T14:23:56.058Z","comments":true,"path":"2019-04-25_将WTL应用向导添加到VS2019/","link":"","permalink":"http://lzl678.top/2019-04-25_将WTL应用向导添加到VS2019/","excerpt":"","text":"WTL 简介 WTL 全称是 Windows Template Library，像 MFC 一样使用 C++ 的面向对象技术对 Win32 接口进行了封装，使之便于开发 Windows 程序。相对于 MFC 这个庞然大物，WTL 保持了小而美，只包含了界面开发相关的特性。 下载 WTL 首先下载最新版本的 WTL，下载地址。下载后将其解压，包含文件如下：AppWizard：包含了应用向导相关的文件，通过该文件夹里面的 Setup.js 进行安装；Include：WTL 库实现文件；Samples：提供了多个示例程序。 修改 Setup.js 双击 AppWizard 目录下的 Setup.js，该文件会搜索电脑上安装的 VStudio，然后提示是否安装 WTL 应用向导，但是该文件目前暂不支持 VS2019，需要对其进行部分修改。从第 86 行开始修改，具体修改项如下所示： 修改注册表 经过以上修改，再次双击 Setup.js 发现并没有搜到 VS2019。在修改 Setup.js 过程中引用了一个注册表项，打开注册表（使用快捷键 Win+R 弹出运行窗口，输入 regedit）发现并不存在这一项。参照下图进行添加： 再次双击 Setup.js 进行安装，在安装过程中如果出现下图点击是即可将 WTL 应用向导安装到 VS2019 中。 测试 WTL 应用向导 打开 VS2019 创建新项目，在搜索框中输入 WTL，如下图： 然后根据向导添加项目名称、修改项目路径等，点击创建后弹出 WTL 应用向导。根据该向导进行修改，添加需要的特性或去除不需要的特性，修改完后点击 Finish 即可成功创建工程。 编译工程 在编译前，需要将 WTL 库（前面提到的 Include 目录）路径添加到 C++ 包含目录中，使工程能够引用到相关头文件。添加方式有多种，可以使用下图所示的方法： 生成的工程中使用了 WTL 中预定义的部分 ID，所以编译时会出现如下错误。 将 WTL 库中 Include 目录下的 atlres.h 拷贝到 WTLApp.rc 所在的目录，然后再次编译即可成功。 - - - End - - -","categories":[{"name":"WTL","slug":"WTL","permalink":"http://lzl678.top/categories/WTL/"}],"tags":[{"name":"WTL","slug":"WTL","permalink":"http://lzl678.top/tags/WTL/"}]},{"title":"VS2019 更新MSDN并创建快捷方式","slug":"2019-04-10_VS2019 更新MSDN并创建快捷方式","date":"2019-04-10T13:44:55.461Z","updated":"2019-04-28T05:39:00.518Z","comments":true,"path":"2019-04-10_VS2019 更新MSDN并创建快捷方式/","link":"","permalink":"http://lzl678.top/2019-04-10_VS2019 更新MSDN并创建快捷方式/","excerpt":"","text":"本文主要记录了 VS2019 中帮助查看器(Help Viewer)相关的内容，如何安装、如何启动、如何复用已有的文档、如何创建快捷方式等内容，通过本文将会对该工具有一个全面的了解。 安装 Help Viewer 如果没有下图所示红色区域的两个子菜单项，说明没有安装 Help Viewer，需要重新启动安装程序进行修改。 在 VS2019 中，通过点击菜单项 Tools-&gt;Get Tools And Features… 可以直接打开安装程序进行修改，如下图所示选中 Help Viewer，然后点击右下角的修改，等待安装完成。 修改启动方式 通过点击菜单项 Help-&gt;View Help 可以启动 Help Viewer，默认设置是打开浏览器显示在线的帮助文档，通过下图的设置将其修改为从 Help Viewer 直接启动。 添加文档内容 安装 Help Viewer 后，还需要在该软件中添加不同的技术文档进行更新才能看到文档内容。如果之前安装过 VS2015 及对应的 MSDN 文档(多达 6G 多)，可以直接利用这些文档，无需重新下载。 假如之前的文档存储在 D://MSDN 目录下，具体步骤如下： 将 MSDN 目录下的文件剪切到其它目录，保持该目录为空，否则步骤 2 无法修改成功； 启动 Help Viewer，修改 Local store path 为 D://MSDN，修改成功后关闭该软件； 将步骤 1 剪切的文件重新剪切回 D://MSDN。 参照上面的步骤修改后，再次启动 Help Viewer，可以看到部分文档的状态显示为 Installed，说明修改成功。然后再根据个人需要添加其它没有安装的文档进行更新即可。 创建快捷方式 Help Viewer 的安装目录在 C:\\Program Files (x86)\\Microsoft Help Viewer，如果安装了其它版本则该目录下有多个子目录。如 VS2015 对应的是 v2.2，VS2017 对应的是 v2.3 目录，VS2019 对应的也是 v2.3 目录，和 VS2017 中安装的帮助查看器是同一个版本。 在使用 VS2019 过程中可以直接打开 Help Viewer 来查看相关文档，但在一些情况下我们可能使用的是其它版本，同时想直接打开安装好的帮助查看器来查阅 API 的使用方法。如果能够为帮助查看器创建桌面快捷方式就能够实现这个目的，下面介绍下设置方式。 查看 Help Viewer 帮助 在 v2.3 目录中我们可以看到 HlpViewer.exe 程序，尝试直接双击该程序会出现如下错误信息。 HelpViewer-exe 根据错误信息提供的提示，在该目录下打开命令行，输入 HlpViewer.exe /? 查看该程序的参数及选项说明，如下图： 创建 Help Viewer 快捷方式 在 v2.3 目录下选中 HlpViewer.exe 通过点击右键，在弹出的菜单中点击 发送到-&gt;桌面快捷方式 根据之前的帮助来设置 HlpViewer 快捷方式的属性，如下图所示（VS2019 的版本号是 16，但是安装的帮助查看器与 VS2017 的是一个版本，所以输入的命令参数使用的是 VS2017 的版本号）。 根据上面的步骤设置完毕，就可以直接双击桌面上的快捷方式来打开 Help Viewer 查阅安装的文档。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[{"name":"VS2019","slug":"VS2019","permalink":"http://lzl678.top/tags/VS2019/"}]},{"title":"VS2019 离线安装方法详解","slug":"2019-04-03_VS2019 离线安装方法详解","date":"2019-04-03T12:13:49.841Z","updated":"2019-04-28T05:38:41.806Z","comments":true,"path":"2019-04-03_VS2019 离线安装方法详解/","link":"","permalink":"http://lzl678.top/2019-04-03_VS2019 离线安装方法详解/","excerpt":"","text":"本文详细介绍了 VS2019 离线安装的相关步骤，以桌面开发为主下载 C++桌面开发、.NET 桌面开发相关的工作负载、MFC 可选组件及帮助查看器。 工作负载(Workload) 离线安装需要先根据开发的项目类型下载相关的 工作负载(Workload)。工作负载包含多个依赖项，分为必需(Required)、建议(Recommended)、可选(Optional) 三种类型。如下图所示： 以 C++桌面开发为例，ATL 是建议组件，而 MFC 是可选组件。 在下载工作负载或可选组件时，需要先选择 VS 版本(本文下载版本为 VS2019 社区版)，因为不同的版本依赖项类型可能不同。如在 VS2017 中 .NET Framework 4.7.2 的 SDK 及目标包为可选类型，在 VS2019 中则为必需类型。 VS2017 中的 .NET Framework 4.7.2： VS2019 中的 .NET Framework 4.7.2： VS2019 工作负载的详细介绍可以看这里。 下载安装工具 在这里下载 Visual Studio 引导程序，该文也讲解了如何根据不同的开发类型下载相关的工作负载。 如下图： 桌面开发(C++ &amp; .NET) 在命令行下输入下面的命令下载 C++桌面开发、.NET 桌面开发工作负载及推荐组件。 1vs_community__891427824.1534167097.exe&nbsp;–layout&nbsp;.\\vs2019_layout&nbsp;–add&nbsp;Microsoft.VisualStudio.Workload.NativeDesktop&nbsp;–add&nbsp;Microsoft.VisualStudio.Workload.ManagedDesktop&nbsp;–includeRecommended&nbsp;–lang&nbsp;en-US&nbsp;zh-CN 命令含义： vs_community__891427824.1534167097.exe：前一步下载的 Visual Studio 引导程序 –layout：指定 VS2019 相关组件的下载目录，设置为当前目录下的 vs2019_layout 目录。 –add：添加将要下载的工作负载，添加的是 NativeDesktop、ManagedDesktop –includeRecommended：安装相关工作负载的推荐组件(另一个参数 –includeOptional 将会下载选定的工作负载中可选的组件，会导致下载的安装包过大，不建议使用。) –lang：下载指定的语言包，本人下载了英文(en-US)、中文(zh-CN) 下载完成后如下图所示： vs_community.exe 的详细命令参数可以看这里。 MFC 可选包 MFC 相关的工具包在工作负载 Microsoft.VisualStudio.Workload.NativeDesktop 中属于可选包，需要单独下载。 1vs_community__891427824.1534167097.exe&nbsp;–layout&nbsp;.\\vs2019_layout&nbsp;–add&nbsp;Microsoft.VisualStudio.Component.VC.ATLMFC&nbsp;–lang&nbsp;en-US&nbsp;zh-CN 帮助查看器(HelpViewer) 帮助查看器属于独立工作负载，也需要单独下载。 1vs_community__891427824.1534167097.exe&nbsp;–layout&nbsp;.\\vs2019_layout&nbsp;–add&nbsp;Microsoft.Component.HelpViewer&nbsp;–lang&nbsp;en-US&nbsp;zh-CN 安装包大小 经过以上步骤下载完毕后，安装包的大小如下图所示，比 VS2017 的还少占用了部分空间(在安装 VS2017 时，这几个工作负载及组件下载后占用 3.15G 空间)。 安装 下载完毕后，将网络断开或将其拷贝到其它未联网的电脑上，然后进入 vs2019_layout 目录，双击 vs_setup.exe 进行安装。 查看 MFC 可选组件及帮助查看器是否选中： 修改安装目录：VS2019 默认安装在 C 盘，将占用大量的磁盘空间，建议修改在其它盘。然后点击右下角的 安装 进行安装。 安装过程如下： 在安装过程中出现了如下警告，点击 继续 安装(安装后创建测试工程暂未发现异常，先不处理)。 创建工程 安装完成后，分别创建 MFC 工程及 WinForm 工程进行测试。 创建新项目： 以 MFC 为例创建项目，在搜索框中输入 MFC 或 选择语言(C++)、平台(Windows)、项目类型(桌面)，然后点击 MFC 应用，根据后面的向导界面修改工程选项，如下图所示： WinForm 项目的创建与 MFC 类似，在搜索框中输入 WinForm 即可，或将语言改为 C#，如下图所示： 编译创建的工程，可以看到全部生成成功。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[{"name":"VS2019","slug":"VS2019","permalink":"http://lzl678.top/tags/VS2019/"}]},{"title":"VS2019 实用操作","slug":"2019-04-02_VS2019实用操作","date":"2019-04-02T12:53:48.940Z","updated":"2019-04-28T05:38:24.881Z","comments":true,"path":"2019-04-02_VS2019实用操作/","link":"","permalink":"http://lzl678.top/2019-04-02_VS2019实用操作/","excerpt":"","text":"本文列出了在编写程序过程中的几个非常实用的操作方式，通过这些操作方式，可以在一定程度上减少重复操作、提高编码效率、改善编程体验。 列模式操作 列操作是一项很常用且实用的功能，可以一次性修改不同的行。 在 VS2010 中已经存在该操作方式，下面表格列出 VStudio 及另外几个常用编辑器的操作方式。 编辑环境 操作方式 VStudio 按着 Alt 键，同时使用鼠标左键进行列操作 VS Code 按着 Alt 键，同时使用鼠标左键单击需要操作的行 Sublime Text 按着 Shift 键，同时使用鼠标右键键进行列操作 Notepad2 按着 Alt 键，同时使用鼠标左键进行列操作 代码片段(Code Snippets) 编写程序过程中会有很多重复的代码片段，如 if 语句、for 语句等，如果编辑器能够在输入 if、for 等关键词后自动填充剩余部分，无疑会在减少枯燥操作的同时节省大量时间。 在 VS2010 中，没有提供 C++ 的代码片段支持，需要安装 Visual Assist X 才能使用；在 VS2019 中则提供了相关支持。可以通过 Tools-&gt;Code Snippets Manager… 查看当前环境支持的语言及代码片段所在的目录，我们可以根据需要添加新的代码片段或修改已有的。 以 if 语句为例，输入 if 后，若是 C++ 文件则 单击 Tab 即可填充剩余部分；若是 C# 文件则需要 双击 Tab 才能填充剩余部分。也可以直接使用 Edit-&gt;IntelliSense-&gt;Surrouond With… (Ctrl+K+S) 来选择需要的输入。 复制(Duplicate) 复制(Ctrl+C)和粘贴(Ctrl+V)是两个操作，在 VS2019 中可以使用 Duplicate(Ctrl+D) 一个操作来代替。 对于单行代码，把光标放在该行任意位置，对于多行，选中代码块，然后使用快捷键 Ctrl+D 即可完成复制粘贴操作。 转到(Go To) 在使用 Sublime Text 和 VS Code 的过程中，通过 Ctrl+P 弹出的输入框可以进行多项操作，如查找文件(输入文件名)、跳转到某一行(输入:行号)、查找符号(输入@符号名)等，非常方便实用。 在 VS2019 中也有类似的输入框，通过 Edit-&gt;Go To 下的子菜单即可弹出，效果如下： 在 VS2019 中快捷键 Ctrl+P 对应的操作是打印，由于该操作并不常用，可以将其移除，然后将 Edit-&gt;Go To-&gt;Go To File… 的快捷键设置为 Ctrl+P。 如下图所示：1.删除之前的快捷键；2.输入新的快捷键；3.设置使之生效。 转到定义(Go To Definition) 当要查找一个变量、函数或类等的定义时，选中查找对象，可通过右键菜单中的菜单项 Go To Definition或 F12进行查找。 在 VS2019 中，可以同过 Ctrl+Click (鼠标左键单击)进行快速查找；在 VS2010 中，使用 Productivity Power Tools 插件中的 Ctrl+Click Go To Definition 功能可以实现同样的操作。 自动换行(Word Wrap) 当一行代码比较长以至于无法在当前行中完全显示时，需要拖动编辑器底部的滚动条进行移动来显示被遮挡的部分。使用 自动换行 可使没有显示的部分自动转到下一行进行显示，通过菜单项 Edit-&gt;Advanced-&gt;Word Wrap (Ctrl+E+W) 来进行设置。 VS2010 也具有该功能。 显示效果： 其它操作 在 Edit 菜单下包含大量的其它操作，对于常用的操作如果能够熟练的使用其快捷键，也能进一步提高编程体验。具体功能菜单项及其对应的快捷键可以在 Edit 下找到，此处不再赘述。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[{"name":"VS2019","slug":"VS2019","permalink":"http://lzl678.top/tags/VS2019/"}]},{"title":"VS2019 实用设置","slug":"2019-03-31_VS2019 实用设置","date":"2019-03-29T15:41:42.398Z","updated":"2019-04-28T05:38:01.245Z","comments":true,"path":"2019-03-31_VS2019 实用设置/","link":"","permalink":"http://lzl678.top/2019-03-31_VS2019 实用设置/","excerpt":"","text":"本文记录了 VS2019 预览版使用过程中的一些设置，这些设置也同样适用于 VS2017，我们可以根据个人的实际情况进行修改。 滚动条(Scroll Bar) 将滚动条设置为 map mode 后，则该区域会显示当前整个文件的缩略示图，能够以不同的颜色显示当前文件中的修改状态、错误、警告等信息，便于对当前文件有个全局的认识。在 VS2010 中需要使用 Productivity Power Tools 插件中的 Enhanced Scroll Bar 功能，在 VS2019 中已经集成了该功能。 在滚动条上点击右键，在弹出的右键菜单上选择Scroll Bar Options…，弹出设置窗口如下： 设置后的效果如下： 显示编译时间 在使用 VS2010 的时候，编译工程结束后会在输出窗口显示编译时间，在 VS1019 中默认不再显示。可以通过以下设置来显示编译时间： 大括号/圆括号包围(Surround with Braces/Parentheses) 在 VS2010 中，选中部分代码块，然后输入 { }、( ) 后该代码块会自动移动到括号中。该功能由 Visual Assist X 提供，并且对 C/C++ 文件、C#文件都有效。 在 VS2019 中， C/C++ 也提供了相关功能(C#文件中没有实现)，需要进行如下设置： - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[{"name":"VS2019","slug":"VS2019","permalink":"http://lzl678.top/tags/VS2019/"}]},{"title":"VS2010主题设置及插件推荐","slug":"2019-03-29_VS2010主题设置及插件推荐","date":"2019-03-29T13:21:24.584Z","updated":"2019-04-28T05:37:24.694Z","comments":true,"path":"2019-03-29_VS2010主题设置及插件推荐/","link":"","permalink":"http://lzl678.top/2019-03-29_VS2010主题设置及插件推荐/","excerpt":"","text":"本文主要写了个人使用 VS2010 的一些配置及实用插件，从而打造一个符合个人风格的开发环境。 基础设置 安装 Visual Assist X 在 VS2010 中若不安装 Visual Assist X 这个插件，直接开发 C++ 相关的项目将是非常痛苦的事情。默认环境没有对代码的不同部分进行颜色高亮显示，也没有任何的智能提示，在这种情况下想要准确写出心中所想几乎不可能。 安装前： 安装后： 显示行号 默认没有显示行号，通过 Tools-&gt;Options… 弹出的窗口进行设置： 更换字体 默认字体是新宋体，将其改为等宽字体，可以使用系统自带的 Consolas 字体，也可以下载安装其它的等宽字体。本人采用的字体是 Liberation Mono。下载该字体后进行解压，将相关的字体文件(后缀为.ttf)直接拷贝到C盘Windows目录下的Fonts目录中，拷贝完成即安装完成。 通过 Tools-&gt;Options… 弹出的窗口进行设置： 当前行及括号匹配 利用 Visual Assist X 的一些设置，显示光标所在的当前行，高亮显示光标所在的括号颜色(默认为黑色，粗体)。 大纲视图 在当前环境下，可以对一个函数进行折叠，如果能够对函数中的代码块进行折叠就更好了。VS2010 提供了该功能，只是默认设置为 False。通过 Tools-&gt;Options… 弹出的窗口进行设置： 显示效果 通过以上设置可以看下当前的显示效果，显然比最开始的要好得多。 实用插件 通过前面的基础设置我们已经有了一个比较友好的开发环境，下面通过一些插件来扩展 VS2010 的功能，使之更加完善。 我们可以通过 Tools-&gt;Extension Manager… 弹出的窗口来直接安装选择的插件，也可以在插件官网下载后再安装。 Productivity Power Tools 该插件由微软提供，包含了多个功能，通过菜单项 Tools-&gt;Options… 打开设置窗口(也可以在文件所在的 Tab 区点击右键，单击弹出的 Customize…)。 默认所有功能都处于 ON 状态，我只用了其中 4 个，设置后如下图，后面将分别进行简单的介绍。 该功能由 Document Well 2010 Plus 提供。可以将需要经常修改的文件固定在前面，这样在打开文件太多时就不需要查找。该功能有众多选项，本人只保留了下图所示选项。 该功能由 Ctrl+Click Go To Definition 提供。可以快捷的找到指定对象的定义位置。 该功能由 Align Assignments 提供。选中包含多个 = 的行，使用快捷键 Ctrl+Alt+] 将其进行对齐，该功能提供的菜单项在 Edit 下。 该功能由 Enhanced Scroll Bar 提供。提供三种模式：Scroll Bar Mode、Map Mode、Full Mode，在 Scroll Bar 上点击右键进行设置。如下图所示： VSColorOutput 在编译工程时，如果有警告或错误，则将相关警告或错误进行高亮显示，如下图所示： Indent Guides 在一对大括号所在的列显示一列虚线，如下图所示： AStyle Extension 在一个项目中，保持统一的代码格式更利于代码的管理，通过该插件可以对C/C++代码进行格式化设置。 AStyle AStyle 是一个开源项目，AStyle 插件内部集成了 AStyle.dll。可以在 AStyle 官网 下载该工具 的可执行版本(AStyle.exe 程序)，在所在目录下打开命令行，输入 AStyle.exe –help 可以查看该工具的所有选项及相应的介绍。 拷贝格式 通过菜单项 Tools-&gt;Options… 打开设置窗口，点击 Edit 弹出的参数命令窗口，将下面的参数拷贝到窗口。 1–indent=spaces=4&nbsp;–align-pointer=type&nbsp;–align-reference=type&nbsp;–indent-switches&nbsp;–indent-namespaces&nbsp;–indent-preproc-cond&nbsp;–indent-col1-comments&nbsp;–pad-oper&nbsp;–fill-empty-lines&nbsp;–break-closing-brackets&nbsp;–keep-one-line-blocks&nbsp;–convert-tabs&nbsp;–mode=c 设置格式 拷贝上面的格式后，通过点击Settings弹出设置窗口，可以看到当前的格式设置，可以根据需要进行其它修改。 自动格式化 选中 Format on save 则在文件进行保存时进行格式化，无需通过快捷键或菜单项(Edit-&gt;Advanced-&gt;Format Document(AStyle))进行设置，从而提高开发效率。 GitSccProvider 该插件是配合 Git 及 TortoiseGit 使用的，Git 用于版本控制，提供了一系列功能强大的命令，TortoiseGit 则在这些命令之上提供了直观的界面操作，使代码的版本控制更加易于管理。 如果使用 Git 及 TortoiseGit 进行版本管理，安装该插件后在 VS2010 中可以直接对代码文件进行各项操作。 设置版本控制 安装该插件后，需要修改源码控制插件，如下所示： 显示效果及操作 如下图所示，我们可以看到文件前面的小图标表明了当前文件的状态；通过右键菜单 Git 下的各子菜单可以对所选文件进行各项常用操作。 主题设置 通过之前的设置，当前的开发环境在使用及功能上已经很完善了。下面的颜色设置可根据个人需要进行修改，在此介绍下我的修改过程。 在使用 Sublime Text 2 时，尝试了自带的所有主题，最终选用了 Zenburnesque，然后参照此主题修改 VS2010 中的颜色。修改主要包括 VS2010 中的颜色设置及 Visual Assist X 中的颜色设置。修改后的颜色主要适配 C/C++ 类型代码文件，若是使用 VS2010 开发其它类型项目建议不要修改，或根据实际情况进行修改。 VS2010 颜色设置 通过菜单项 Tools-&gt;Options… 打开设置窗口，如下图所示： 需要修改的颜色如下： Display items Item foreground Item background Plain Text RGB(222,222,222) RGB(64,64,64) Selected Text 默认 RGB(160,160,192) Inactive Selected Text 默认 RGB(64,64,64) Collapsible Region 默认 RGB(102,102,115) Comment RGB(156,171,143) 默认 Keyword RGB(96,128,225) 默认 Preprocessor Keyword RGB(255,204,102) 默认 String RGB(177,177,152) 默认 VA X Find Reference 默认 RGB(102,102,115) VA 颜色设置 需要将颜色修改成下图所示颜色： 显示效果 设置完后，可以看到如下显示效果，只有右面的侧边栏颜色与其它编辑区的颜色不同。 MetalMargin 该插件与 Productivity Power Tools 中的 Enhanced Scroll Bar 功能相似，只是该插件的背景色与先前设置的编辑区背景色更相近。如果没有参照主题设置进行修改则只使用Enhanced Scroll Bar功能即可，修改后可以同时使用，安装该插件并将 Enhanced Scroll Bar 的模式设置为 map Mode 即可。以下是更改后的显示效果: 导出配置 根据上面修改完毕后，可以导出主题颜色相关的配置以便在不同的电脑上进行复用。 选择导出 通过菜单项 Import and Export Settings… 打开如下窗口，选中导出设置项，然后点击 Next。 选择 Fonts And Colors 通过点击根节点的 All Settings，将其它项全都取消选中，只选中 Fonts And Colors 这一项，然后点击 Next。后面的操作没有需要注意的地方，不再介绍。 导入配置 可以将之前修改好的配置文件直接导入到 VS2010 中，无需一个个设置不同的颜色。 选择导入 与选择导出操作方式一样，选择第二项 Import selected — 即可，然后点击 Next。 备份当前配置 上一步之后，弹出如下窗口，如果之前没有备份当前的设置，建议安装默认选项进行备份，如果导入的配置不符个人喜好可以根据现在的步骤再次导入之前备份的配置文件，从而恢复成之前的配置项。 选择文件 如下图所示，选择想要导入的文件。 小结 本文主要介绍了 VS2010 的一些设置及一些比较实用的插件，从而使开发环境更具个人特色、功能更完善。在此提到的一些设置或插件在新的版本中(如 VS2017、VS2019)有些已经内置，在以后的使用中再慢慢探索。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[{"name":"VS2010","slug":"VS2010","permalink":"http://lzl678.top/tags/VS2010/"}]},{"title":"放下VS2010，拥抱VS2019","slug":"2019-03-28_放下VS2010，拥抱VS2019","date":"2019-03-28T14:47:02.070Z","updated":"2019-04-28T05:36:24.105Z","comments":true,"path":"2019-03-28_放下VS2010，拥抱VS2019/","link":"","permalink":"http://lzl678.top/2019-03-28_放下VS2010，拥抱VS2019/","excerpt":"","text":"VS2019 再过几天就要正式发布了，我们还在使用 VS2010 进行软件开发。由于所处行业环境及项目类型，加之之前的代码积累，所以即使不用新的开发环境、新的语言技术也能比较好的完成工作。那究竟要不要使用新的开发环境、新的技术呢？答案当然是肯定的。 过去几年一直使用 VS2010 进行开发，使用 MFC 作为界面框架，使用 C++ 中的容器、算法，使用 C 线程处理多线程，使用 Win32 中的临界区、Event、Mutex 等处理线程间通信，使用 boost 中的部分组件(如 bind、function、signals2 等)等。多年过去，是时候做些改变了。 学习 C++11 C++11 已经推出多年，现在每三年一个标准，C++14、C++17 已制定完毕，C++20 也在路上。一味追随新技术只会让自己陷入疲惫和迷茫，但对于比较成熟的技术还是要不断学习、尝试使用，同时保持对新技术的关注。 VS2010 已经提供了部分 C++11 的功能，如 auto、nullprt、std::shared_ptr、std::unique_ptr、部分 lambda 等功能，但其它如 foreach、容器初始化、多线程库、原子库、正则表达式库等大部分功能并没有包含。虽然这些可以使用 boost 中提供的相关库(C++11 中的很多功能源自 boost)，但新的开发环境显然提供了更完善的支持，从编写、编译、运行调试等各方面都能够提升编码体验。 放弃 MFC MFC 是微软提供的 Windows 桌面开发框架，主要使用面向对象思想对 Win32 API 进行了封装以便能够快速开发桌面程序。从 92 年发布距今已经 27 年，还在使用的人想必不会太多，愿意花时间学习的就更少了。 MFC 问世时，C++ 的标准(C++98)还在制定中，模板及模板元编程也还没出现。随着 VC6 的成功 MFC 也火了一段时间，在 VS2010 中也加入了大量的新组件(相关类以 CMFC 开头，其实是集成了 BCG 库)，在此之后再也没有大的改进。 在安装 VS2010 时，MFC 还是默认安装的，在安装 VS2015 时，MFC 需要手动选择才会安装，之后的版本(VS2017、VS2019 预览版)也是如此。 试用 .Net Core 过去微软主推 .Net 技术，现在主推 .Net Core 技术，.Net 的桌面开发技术 WinForm、WPF 也已移植到 .Net Core 中。利用 .Net 庞大的基础类库，使用 C# 的诸多语法特性，借助 VStudio 的智能支持，使用 WinForm 能够更加快速的开发桌面程序，而且更易维护。 所以是时候放弃 MFC，转而使用新的开发框架了。 使用 VS2019 .Net Core 作为微软新一代技术平台，已经发展多年，完全开源、跨平台(WinForm、WPF 只支持 Windows 平台)。使用跨平台软件 VS Code 可以直接在各平台上进行开发并能获得一直的开发体验，只是若要使用 .Net Core + WinForm 进行桌面软件开发，还是使用 VStudio 更加便利，而这些在 VS2019 中才有更好的支持。 小结 在使用 VS2010 时，她是最新的开发环境、C++11 标准还没被各大厂商支持、微软还不是现在的微软(以前闭源，现在开源)、.Net Core 还没问世，我们使用的也是当时的新技术。随着时间的推移，各项技术(开发工具、语言)都又有了进一步的发展，我们也需要重新选择。只有不断的学习才能不断的进步。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://lzl678.top/categories/VStudio/"}],"tags":[]},{"title":"Hello World","slug":"2019-03-10_hello-world","date":"2019-03-10T07:26:40.000Z","updated":"2019-04-28T05:35:57.155Z","comments":true,"path":"2019-03-10_hello-world/","link":"","permalink":"http://lzl678.top/2019-03-10_hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment - - - End - - -","categories":[{"name":"Test","slug":"Test","permalink":"http://lzl678.top/categories/Test/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://lzl678.top/tags/hexo/"}]}]}