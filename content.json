{"meta":{"title":"Lzl678","subtitle":null,"description":null,"author":"Lzl678","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2019-02-17T06:31:56.000Z","updated":"2019-02-17T06:35:07.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-17T06:31:56.000Z","updated":"2019-02-17T06:35:10.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"VS2010主题设置及插件推荐","slug":"VS2010主题设置及插件推荐","date":"2019-03-29T13:21:24.584Z","updated":"2019-03-29T14:44:55.979Z","comments":true,"path":"2019/03/29/VS2010主题设置及插件推荐/","link":"","permalink":"http://yoursite.com/2019/03/29/VS2010主题设置及插件推荐/","excerpt":"","text":"本文主要写了个人使用 VS2010 的一些配置及实用插件，从而打造一个符合个人风格的开发环境。 基础设置 安装 Visual Assist X 在 VS2010 中若不安装 Visual Assist X 这个插件，直接开发 C++ 相关的项目将是非常痛苦的事情。默认环境没有对代码的不同部分进行颜色高亮显示，也没有任何的智能提示，在这种情况下想要准确写出心中所想几乎不可能。 安装前： 安装后： 显示行号 默认没有显示行号，通过 Tools-&gt;Options… 弹出的窗口进行设置： 更换字体 默认字体是新宋体，将其改为等宽字体，可以使用系统自带的 Consolas 字体，也可以下载安装其它的等宽字体。本人采用的字体是 Liberation Mono。下载该字体后进行解压，将相关的字体文件(后缀为.ttf)直接拷贝到C盘Windows目录下的Fonts目录中，拷贝完成即安装完成。 通过 Tools-&gt;Options… 弹出的窗口进行设置： 当前行及括号匹配 利用 Visual Assist X 的一些设置，显示光标所在的当前行，高亮显示光标所在的括号颜色(默认为黑色，粗体)。 大纲视图 在当前环境下，可以对一个函数进行折叠，如果能够对函数中的代码块进行折叠就更好了。VS2010 提供了该功能，只是默认设置为 False。通过 Tools-&gt;Options… 弹出的窗口进行设置： 显示效果 通过以上设置可以看下当前的显示效果，显然比最开始的要好得多。 实用插件 通过前面的基础设置我们已经有了一个比较友好的开发环境，下面通过一些插件来扩展 VS2010 的功能，使之更加完善。 我们可以通过 Tools-&gt;Extension Manager… 弹出的窗口来直接安装选择的插件，也可以在插件官网下载后再安装。 Productivity Power Tools 该插件由微软提供，包含了多个功能，通过菜单项 Tools-&gt;Options… 打开设置窗口(也可以在文件所在的 Tab 区点击右键，单击弹出的 Customize…)。 默认所有功能都处于 ON 状态，我只用了其中 4 个，设置后如下图，后面将分别进行简单的介绍。 该功能由 Document Well 2010 Plus 提供。可以将需要经常修改的文件固定在前面，这样在打开文件太多时就不需要查找。该功能有众多选项，本人只保留了下图所示选项。 该功能由 Ctrl+Click Go To Definition 提供。可以快捷的找到指定对象的定义位置。 该功能由 Align Assignments 提供。选中包含多个 = 的行，使用快捷键 Ctrl+Alt+] 将其进行对齐，该功能提供的菜单项在 Edit 下。 该功能由 Enhanced Scroll Bar 提供。提供三种模式：Scroll Bar Mode、Map Mode、Full Mode，在 Scroll Bar 上点击右键进行设置。如下图所示： VSColorOutput 在编译工程时，如果有警告或错误，则将相关警告或错误进行高亮显示，如下图所示： Indent Guides 在一对大括号所在的列显示一列虚线，如下图所示： AStyle Extension 在一个项目中，保持统一的代码格式更利于代码的管理，通过该插件可以对C/C++代码进行格式化设置。 AStyle AStyle 是一个开源项目，AStyle 插件内部集成了 AStyle.dll。可以在 AStyle 官网 下载该工具 的可执行版本(AStyle.exe 程序)，在所在目录下打开命令行，输入 AStyle.exe –help 可以查看该工具的所有选项及相应的介绍。 拷贝格式 通过菜单项 Tools-&gt;Options… 打开设置窗口，点击 Edit 弹出的参数命令窗口，将下面的参数拷贝到窗口。 1–indent=spaces=4&nbsp;–align-pointer=type&nbsp;–align-reference=type&nbsp;–indent-switches&nbsp;–indent-namespaces&nbsp;–indent-preproc-cond&nbsp;–indent-col1-comments&nbsp;–pad-oper&nbsp;–fill-empty-lines&nbsp;–break-closing-brackets&nbsp;–keep-one-line-blocks&nbsp;–convert-tabs&nbsp;–mode=c 设置格式 拷贝上面的格式后，通过点击Settings弹出设置窗口，可以看到当前的格式设置，可以根据需要进行其它修改。 自动格式化 选中 Format on save 则在文件进行保存时进行格式化，无需通过快捷键或菜单项(Edit-&gt;Advanced-&gt;Format Document(AStyle))进行设置，从而提高开发效率。 GitSccProvider 该插件是配合 Git 及 TortoiseGit 使用的，Git 用于版本控制，提供了一系列功能强大的命令，TortoiseGit 则在这些命令之上提供了直观的界面操作，使代码的版本控制更加易于管理。 如果使用 Git 及 TortoiseGit 进行版本管理，安装该插件后在 VS2010 中可以直接对代码文件进行各项操作。 设置版本控制 安装该插件后，需要修改源码控制插件，如下所示： 显示效果及操作 如下图所示，我们可以看到文件前面的小图标表明了当前文件的状态；通过右键菜单 Git 下的各子菜单可以对所选文件进行各项常用操作。 主题设置 通过之前的设置，当前的开发环境在使用及功能上已经很完善了。下面的颜色设置可根据个人需要进行修改，在此介绍下我的修改过程。 在使用 Sublime Text 2 时，尝试了自带的所有主题，最终选用了 Zenburnesque，然后参照此主题修改 VS2010 中的颜色。修改主要包括 VS2010 中的颜色设置及 Visual Assist X 中的颜色设置。修改后的颜色主要适配 C/C++ 类型代码文件，若是使用 VS2010 开发其它类型项目建议不要修改，或根据实际情况进行修改。 VS2010 颜色设置 通过菜单项 Tools-&gt;Options… 打开设置窗口，如下图所示： 需要修改的颜色如下： Display items Item foreground Item background Plain Text RGB(222,222,222) RGB(64,64,64) Selected Text 默认 RGB(160,160,192) Inactive Selected Text 默认 RGB(64,64,64) Collapsible Region 默认 RGB(102,102,115) Comment RGB(156,171,143) 默认 Keyword RGB(96,128,225) 默认 Preprocessor Keyword RGB(255,204,102) 默认 String RGB(177,177,152) 默认 VA X Find Reference 默认 RGB(102,102,115) VA 颜色设置 需要将颜色修改成下图所示颜色： 显示效果 设置完后，可以看到如下显示效果，只有右面的侧边栏颜色与其它编辑区的颜色不同。 MetalMargin 该插件与 Productivity Power Tools 中的 Enhanced Scroll Bar 功能相似，只是该插件的背景色与先前设置的编辑区背景色更相近。如果没有参照主题设置进行修改则只使用Enhanced Scroll Bar功能即可，修改后可以同时使用，安装该插件并将 Enhanced Scroll Bar 的模式设置为 map Mode 即可。以下是更改后的显示效果: 导出配置 根据上面修改完毕后，可以导出主题颜色相关的配置以便在不同的电脑上进行复用。 选择导出 通过菜单项 Import and Export Settings… 打开如下窗口，选中导出设置项，然后点击 Next。 选择 Fonts And Colors 通过点击根节点的 All Settings，将其它项全都取消选中，只选中 Fonts And Colors 这一项，然后点击 Next。后面的操作没有需要注意的地方，不再介绍。 导入配置 可以将之前修改好的配置文件直接导入到 VS2010 中，无需一个个设置不同的颜色。 选择导入 与选择导出操作方式一样，选择第二项 Import selected — 即可，然后点击 Next。 备份当前配置 上一步之后，弹出如下窗口，如果之前没有备份当前的设置，建议安装默认选项进行备份，如果导入的配置不符个人喜好可以根据现在的步骤再次导入之前备份的配置文件，从而恢复成之前的配置项。 选择文件 如下图所示，选择想要导入的文件。 小结 本文主要介绍了 VS2010 的一些设置及一些比较实用的插件，从而使开发环境更具个人特色、功能更完善。在此提到的一些设置或插件在新的版本中(如 VS2017、VS2019)有些已经内置，在以后的使用中再慢慢探索。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://yoursite.com/categories/VStudio/"}],"tags":[{"name":"VS2010","slug":"VS2010","permalink":"http://yoursite.com/tags/VS2010/"}]},{"title":"放下VS2010，拥抱VS2019","slug":"放下VS2010，拥抱VS2019","date":"2019-03-28T14:47:02.070Z","updated":"2019-03-29T14:45:56.054Z","comments":true,"path":"2019/03/28/放下VS2010，拥抱VS2019/","link":"","permalink":"http://yoursite.com/2019/03/28/放下VS2010，拥抱VS2019/","excerpt":"","text":"VS2019 再过几天就要正式发布了，我们还在使用 VS2010 进行软件开发。由于所处行业环境及项目类型，加之之前的代码积累，所以即使不用新的开发环境、新的语言技术也能比较好的完成工作。那究竟要不要使用新的开发环境、新的技术呢？答案当然是肯定的。 过去几年一直使用 VS2010 进行开发，使用 MFC 作为界面框架，使用 C++ 中的容器、算法，使用 C 线程处理多线程，使用 Win32 中的临界区、Event、Mutex 等处理线程间通信，使用 boost 中的部分组件(如 bind、function、signals2 等)等。多年过去，是时候做些改变了。 学习 C++11 C++11 已经推出多年，现在每三年一个标准，C++14、C++17 已制定完毕，C++20 也在路上。一味追随新技术只会让自己陷入疲惫和迷茫，但对于比较成熟的技术还是要不断学习、尝试使用，同时保持对新技术的关注。 VS2010 已经提供了部分 C++11 的功能，如 auto、nullprt、std::shared_ptr、std::unique_ptr、部分 lambda 等功能，但其它如 foreach、容器初始化、多线程库、原子库、正则表达式库等大部分功能并没有包含。虽然这些可以使用 boost 中提供的相关库(C++11 中的很多功能源自 boost)，但新的开发环境显然提供了更完善的支持，从编写、编译、运行调试等各方面都能够提升编码体验。 放弃 MFC MFC 是微软提供的 Windows 桌面开发框架，主要使用面向对象思想对 Win32 API 进行了封装以便能够快速开发桌面程序。从 92 年发布距今已经 27 年，还在使用的人想必不会太多，愿意花时间学习的就更少了。 MFC 问世时，C++ 的标准(C++98)还在制定中，模板及模板元编程也还没出现。随着 VC6 的成功 MFC 也火了一段时间，在 VS2010 中也加入了大量的新组件(相关类以 CMFC 开头，其实是集成了 BCG 库)，在此之后再也没有大的改进。 在安装 VS2010 时，MFC 还是默认安装的，在安装 VS2015 时，MFC 需要手动选择才会安装，之后的版本(VS2017、VS2019 预览版)也是如此。 试用 .Net Core 过去微软主推 .Net 技术，现在主推 .Net Core 技术，.Net 的桌面开发技术 WinForm、WPF 也已移植到 .Net Core 中。利用 .Net 庞大的基础类库，使用 C# 的诸多语法特性，借助 VStudio 的智能支持，使用 WinForm 能够更加快速的开发桌面程序，而且更易维护。 所以是时候放弃 MFC，转而使用新的开发框架了。 使用 VS2019 .Net Core 作为微软新一代技术平台，已经发展多年，完全开源、跨平台(WinForm、WPF 只支持 Windows 平台)。使用跨平台软件 VS Code 可以直接在各平台上进行开发并能获得一直的开发体验，只是若要使用 .Net Core + WinForm 进行桌面软件开发，还是使用 VStudio 更加便利，而这些在 VS2019 中才有更好的支持。 小结 在使用 VS2010 时，她是最新的开发环境、C++11 标准还没被各大厂商支持、微软还不是现在的微软(以前闭源，现在开源)、.Net Core 还没问世，我们使用的也是当时的新技术。随着时间的推移，各项技术(开发工具、语言)都又有了进一步的发展，我们也需要重新选择。只有不断的学习才能不断的进步。 - - - End - - -","categories":[{"name":"VStudio","slug":"VStudio","permalink":"http://yoursite.com/categories/VStudio/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-10T07:26:40.000Z","updated":"2019-03-29T14:46:02.855Z","comments":true,"path":"2019/03/10/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/10/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment - - - End - - -","categories":[{"name":"Test","slug":"Test","permalink":"http://yoursite.com/categories/Test/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}